{
  "invoice_number": {
    "type": "string",
    "description": "The `invoice_number` field in an invoice JSON structure is of type string. It serves as a unique identifier for the invoice within a system or a business context. This field typically contains a combination of letters, numbers, or both, and is used to track and reference the specific invoice in question. The `invoice_number` is crucial for organizing and retrieving invoice records, ensuring that each invoice can be distinctly identified from others. It is often generated following a specific format or sequence determined by the business or accounting software, and it helps in avoiding duplication and confusion."
  },
  "date": {
    "type": "string",
    "description": "The \"date\" field in an invoice JSON structure is a string that typically represents the date on which the invoice was issued. This date is often formatted in a standard date format, such as \"YYYY-MM-DD\" (e.g., \"2023-10-05\") or another format like \"MM/DD/YYYY\" (e.g., \"10/05/2023\"), depending on regional or organizational preferences. The \"date\" field is crucial for record-keeping, tracking payment deadlines, and accounting purposes, as it helps determine the billing cycle and due dates for payment."
  },
  "page": {
    "type": "string",
    "description": "The \"page\" field in an invoice JSON structure, with a type of string, is typically used to indicate the specific page number or page identifier of the invoice document. This field can be particularly useful when dealing with multi-page invoices, allowing you to specify or reference a particular page within the document. The value of this field is expected to be a string, which means it can contain not only numeric page numbers like \"1\", \"2\", \"3\", etc., but also any other string identifiers that might be used in the document's pagination system, such as \"Cover\", \"Summary\", or \"Appendix A\"."
  },
  "remit_to": {
    "type": "object",
    "description": "The `remit_to` field in an invoice JSON structure is an object that typically contains information about the entity to which payment should be sent. This object can include various sub-fields that provide detailed payment instructions or contact information. Common sub-fields within the `remit_to` object might include:\n\n- `name`: The name of the company or individual to whom the payment should be remitted.\n- `address`: An object containing the address details, which may further include:\n  - `street`: The street address for remittance.\n  - `city`: The city where the remittance address is located.\n  - `state`: The state or region of the remittance address.\n  - `postal_code`: The postal or ZIP code for the remittance address.\n  - `country`: The country of the remittance address.\n- `email`: An email address where payment confirmations or inquiries can be sent.\n- `phone`: A phone number for contacting the remit-to entity regarding payments.\n- `bank_details`: An object containing bank information if payment is to be made via bank transfer, which might include:\n  - `bank_name`: The name of the bank.\n  - `account_number`: The bank account number.\n  - `routing_number`: The routing number for the bank.\n  - `swift_code`: The SWIFT/BIC code for international transfers.\n- `payment_method`: The preferred method of payment, such as bank transfer, check, or online payment platform.\n\nThe `remit_to` object helps ensure that payments are directed to the correct recipient and processed efficiently."
  },
  "remit_to.name": {
    "type": "string",
    "description": "The `remit_to.name` field in an invoice JSON structure is a string that represents the name of the individual or organization to whom payment should be sent. This field is typically used to specify the payee's name, ensuring that the payment is directed to the correct recipient. The `remit_to` prefix indicates that this field is part of a larger object or section related to payment instructions or details, and the `name` specifies that it is the actual name of the payee. This information is crucial for accurate and timely payments, as it helps prevent errors in directing funds."
  },
  "remit_to.address": {
    "type": "string",
    "description": "The `remit_to.address` field in an invoice JSON structure is a string type field that represents the address where payments should be sent. This field typically contains the full mailing address of the recipient designated to receive payment for the invoice. It may include components such as the street address, city, state or province, postal code, and possibly the country. The `remit_to.address` field is crucial for ensuring that payments are directed to the correct location, especially in cases where the billing address differs from the payment address."
  },
  "remit_to.city": {
    "type": "string",
    "description": "The `remit_to.city` field in an invoice JSON structure is a string that specifies the city where the payment for the invoice should be sent. This field is part of the remit-to address, which provides the necessary details for the payer to know where to direct their payment. The value of this field should be a valid city name, corresponding to the location of the entity or department that is designated to receive the payment. This information is crucial for ensuring that payments are processed correctly and reach the intended recipient without delays."
  },
  "remit_to.state": {
    "type": "string",
    "description": "The `remit_to.state` field in an invoice JSON structure is a string that specifies the state or region to which the payment should be sent. This field is part of the address information for the remittance, indicating the state or equivalent administrative division within the country where the recipient of the payment is located. It is typically used for addressing purposes to ensure that the payment is directed to the correct location. The value should be a valid state or region name or abbreviation, depending on the country's addressing standards."
  },
  "remit_to.zip": {
    "type": "string",
    "description": "The `remit_to.zip` field in an invoice JSON structure is a string that represents the postal or ZIP code of the address where payments should be sent. This field is part of the `remit_to` address block, which contains the details necessary for sending payments to the correct recipient. The postal code is typically a numeric or alphanumeric code used by postal services to identify a specific geographic region or delivery route. This field is essential for ensuring accurate and timely delivery of payment-related correspondence or checks."
  },
  "remit_to.phone": {
    "type": "string",
    "description": "The `remit_to.phone` field in an invoice JSON structure is a string that represents the phone number of the entity to which payment should be sent. This field typically contains the contact phone number for the remittance address or department, allowing the payer to reach out for any inquiries or confirmations related to the payment or invoice. The phone number may be formatted according to local or international standards, and it should include any necessary country or area codes to ensure proper dialing."
  },
  "remit_to.fax": {
    "type": "string",
    "description": "The `remit_to.fax` field in an invoice JSON structure is a string that represents the fax number to which payment remittance details should be sent. This field is part of the `remit_to` object, which typically contains contact information for the entity or department responsible for receiving payments. The fax number should be formatted according to the relevant international or local standards, allowing for proper communication via fax machines. This field is useful for businesses or individuals who prefer or require fax as a method of receiving remittance information."
  },
  "bill_to": {
    "type": "object",
    "description": "The `bill_to` field in an invoice JSON structure is an object that typically contains information about the party responsible for paying the invoice. This object usually includes several key-value pairs that provide detailed billing information. Common fields within the `bill_to` object might include:\n\n1. **name**: A string representing the name of the individual or company being billed.\n2. **address**: An object or string detailing the billing address. If an object, it might include:\n   - **street**: The street address or P.O. box.\n   - **city**: The city of the billing address.\n   - **state**: The state or region of the billing address.\n   - **postal_code**: The ZIP or postal code.\n   - **country**: The country of the billing address.\n\n3. **email**: A string containing the email address of the billing contact.\n4. **phone**: A string with the phone number for billing inquiries.\n5. **contact_person**: A string with the name of the person to contact regarding the invoice.\n6. **company**: A string representing the company name if the invoice is billed to a business entity.\n\nThese fields help ensure that the invoice is directed to the correct recipient and that all necessary contact information is available for payment processing or inquiries. The exact structure and fields within the `bill_to` object can vary depending on the specific requirements of the invoicing system or application."
  },
  "bill_to.name": {
    "type": "string",
    "description": "The `bill_to.name` field in an invoice JSON structure is a string that represents the name of the individual or entity to whom the invoice is addressed. This field is typically used to specify the recipient of the invoice, indicating who is responsible for payment. It should contain the full name of the person or the official name of the company or organization being billed. This information is essential for identifying the correct party responsible for settling the invoice."
  },
  "bill_to.address": {
    "type": "string",
    "description": "The `bill_to.address` field in an invoice JSON structure is a string that represents the address of the individual or entity being billed. This field typically contains the full address, which may include the street address, city, state or province, postal code, and possibly the country. This information is crucial for identifying where the invoice should be sent or for record-keeping purposes to ensure accurate billing. The format of the address string may vary depending on regional address conventions."
  },
  "bill_to.city": {
    "type": "string",
    "description": "The `bill_to.city` field in an invoice JSON structure is a string that specifies the name of the city to which the invoice is being billed. This field is part of the `bill_to` object, which contains information about the billing address. The `city` field is used to identify the city associated with the recipient's billing address, which is important for ensuring that the invoice is directed to the correct location. This field should contain a valid city name and is typically used in conjunction with other address fields such as `bill_to.street`, `bill_to.state`, and `bill_to.zip_code` to form a complete billing address."
  },
  "bill_to.state": {
    "type": "string",
    "description": "The `bill_to.state` field in an invoice JSON structure is a string that represents the state or province of the recipient's billing address. This field is typically used to specify the specific region within a country where the invoice should be sent or where the billing entity is located. It is important for tax calculations, shipping logistics, and ensuring that the invoice is directed to the correct location. The value of this field should be a valid state or province abbreviation or name, depending on the country's addressing standards."
  },
  "bill_to.zip": {
    "type": "string",
    "description": "The `bill_to.zip` field in an invoice JSON structure is a string that represents the postal or ZIP code of the billing address. This field is used to specify the specific area or region to which the invoice is being billed. It is a part of the `bill_to` object, which contains information about the recipient of the invoice. The ZIP code is important for ensuring accurate delivery and processing of the invoice, particularly in regions where postal codes are used to facilitate mail sorting and delivery. The value should be formatted according to the postal standards of the country in which the billing address is located."
  },
  "ship_to": {
    "type": "object",
    "description": "The `ship_to` field in an invoice JSON structure is an object that typically contains information about the shipping destination for the goods or services listed in the invoice. This object can include various subfields that provide specific details about the recipient and address where the items should be delivered. Common subfields within the `ship_to` object might include:\n\n1. **name**: A string representing the name of the person or company receiving the shipment.\n\n2. **address_line1**: A string for the first line of the street address, often including the street number and name.\n\n3. **address_line2**: A string for additional address information, such as an apartment, suite, unit number, or building.\n\n4. **city**: A string indicating the city where the shipment is to be delivered.\n\n5. **state**: A string representing the state, province, or region of the shipping address.\n\n6. **postal_code**: A string for the postal or ZIP code of the shipping address.\n\n7. **country**: A string indicating the country of the shipping address, often represented by its full name or ISO country code.\n\n8. **phone**: A string containing a contact phone number for the recipient, which may be used by the shipping company for delivery issues.\n\n9. **email**: A string with an email address for the recipient, useful for electronic communication regarding the shipment.\n\nThese subfields ensure that the shipping details are comprehensive and accurate, facilitating the correct delivery of the invoice items."
  },
  "ship_to.name": {
    "type": "string",
    "description": "The `ship_to.name` field in an invoice JSON structure is a string that represents the name of the recipient or entity to whom the goods or services are being shipped. This field typically contains the full name of the individual or the name of the company that is designated to receive the shipment. It is an important field for ensuring that the package or delivery is directed to the correct recipient."
  },
  "ship_to.address": {
    "type": "string",
    "description": "The `ship_to.address` field in an invoice JSON structure is a string that holds the address information for the recipient or destination where the goods or services are to be delivered. This field typically contains the full address, which may include the street address, apartment or suite number (if applicable), city, state or province, postal or ZIP code, and possibly the country. The address should be formatted in a way that is suitable for mailing or delivery purposes."
  },
  "ship_to.city": {
    "type": "string",
    "description": "The `ship_to.city` field in an invoice JSON structure is a string type field that specifies the city to which the goods or services are being shipped. This field provides the name of the destination city for the shipment, which is part of the shipping address. It is important for ensuring that the delivery is directed to the correct location. The value should be a valid city name, and it is typically used in conjunction with other address-related fields such as `ship_to.street`, `ship_to.state`, `ship_to.zip`, and `ship_to.country` to form a complete shipping address."
  },
  "ship_to.state": {
    "type": "string",
    "description": "The `ship_to.state` field in an invoice JSON structure is a string that represents the state or region to which the goods or services are being shipped. This field is typically used to specify the destination state within a country, which is important for shipping logistics, calculating sales tax, and ensuring accurate delivery. The value of this field should be formatted according to the standard or common abbreviation for states or regions in the relevant country (e.g., \"CA\" for California in the United States)."
  },
  "ship_to.zip": {
    "type": "string",
    "description": "The `ship_to.zip` field in an invoice JSON structure is a string that represents the postal or ZIP code of the shipping address where the goods or services are to be delivered. This field is typically part of a nested object under `ship_to`, which contains various details related to the shipping destination. The ZIP code is used to identify the specific geographic region or area within a country to ensure accurate and efficient delivery by postal and courier services. It is important for this field to be formatted correctly according to the postal standards of the destination country."
  },
  "customer_po": {
    "type": "string",
    "description": "The `customer_po` field in an invoice JSON structure is a string that represents the customer's purchase order number. This field is used to store the unique identifier assigned by the customer to a specific order. It serves as a reference for both the customer and the vendor to track and manage orders, ensuring that the invoice corresponds to the correct purchase order made by the customer. This helps in maintaining accurate records and facilitates communication between the customer and the vendor regarding the order."
  },
  "order_date": {
    "type": "string",
    "description": "The `order_date` field in an invoice JSON structure is a string that represents the date on which the order was placed. This field typically follows a standard date format, such as \"YYYY-MM-DD\" (ISO 8601 format), to ensure consistency and ease of processing. The `order_date` is crucial for tracking the timeline of the order, determining due dates, and managing inventory and logistics. It helps both the buyer and seller to understand when the transaction began and can be used for record-keeping, reporting, and analysis purposes."
  },
  "date_shipped": {
    "type": "string",
    "description": "The `date_shipped` field in an invoice JSON structure is a string that represents the date on which the goods or services associated with the invoice were shipped to the customer. This field typically follows a standard date format, such as \"YYYY-MM-DD\" (e.g., \"2023-10-15\"), to ensure consistency and ease of parsing. The `date_shipped` field is important for tracking the logistics and delivery timeline of the order, and it can be used for inventory management, customer service inquiries, and calculating delivery times."
  },
  "due_date": {
    "type": "string",
    "description": "The `due_date` field in an invoice JSON structure is a string that represents the date by which the payment for the invoice is expected to be made. This field typically follows a specific date format, such as \"YYYY-MM-DD\" (ISO 8601 format), to ensure consistency and avoid ambiguity in date representation. The `due_date` is crucial for both the issuer and the recipient of the invoice, as it indicates the deadline for payment and helps in managing cash flow and financial planning. Properly setting and interpreting this field can help avoid late payment penalties and maintain good business relationships."
  },
  "shipping_info": {
    "type": "object",
    "description": "The `shipping_info` field in an invoice JSON structure is an object that contains details related to the shipping of the items included in the invoice. This object typically includes various subfields that provide comprehensive information about the shipping process. Common subfields within the `shipping_info` object might include:\n\n1. **address**: An object containing detailed information about the shipping address. This can include subfields such as `street`, `city`, `state`, `postal_code`, and `country`.\n\n2. **method**: A string indicating the shipping method used, such as \"Standard\", \"Express\", \"Overnight\", etc.\n\n3. **tracking_number**: A string representing the tracking number provided by the shipping carrier, which can be used to track the shipment.\n\n4. **carrier**: A string specifying the shipping carrier or service provider, such as \"UPS\", \"FedEx\", \"DHL\", etc.\n\n5. **cost**: A number representing the cost of shipping, often including currency information.\n\n6. **estimated_delivery_date**: A date string indicating the estimated delivery date of the shipment.\n\n7. **shipping_date**: A date string that shows when the shipment was dispatched.\n\n8. **status**: A string indicating the current status of the shipment, such as \"Pending\", \"Shipped\", \"Delivered\", etc.\n\nThese subfields help provide a complete picture of the shipping arrangements associated with the invoice, ensuring that both the sender and recipient have all necessary information regarding the delivery of the goods."
  },
  "shipping_info.freight_terms": {
    "type": "string",
    "description": "The `shipping_info.freight_terms` field in an invoice JSON structure is a string that specifies the terms and conditions under which the freight or shipping costs are handled between the seller and the buyer. This field typically outlines who is responsible for paying the shipping costs and at what point the responsibility for the goods transfers from the seller to the buyer. Common freight terms might include \"FOB\" (Free On Board), \"CIF\" (Cost, Insurance, and Freight), or \"EXW\" (Ex Works), among others. These terms help both parties understand their obligations and liabilities regarding the shipment of goods."
  },
  "shipping_info.shipped_via": {
    "type": "string",
    "description": "The `shipping_info.shipped_via` field in an invoice JSON structure is a string that indicates the shipping carrier or service used to deliver the goods associated with the invoice. This field typically contains the name of the shipping company or the specific service level (e.g., \"FedEx\", \"UPS Ground\", \"DHL Express\") that was chosen for the shipment. It helps the recipient understand how the package is being transported and may also be useful for tracking purposes or resolving shipping-related inquiries."
  },
  "shipping_info.bill_of_lading": {
    "type": "string",
    "description": "The `shipping_info.bill_of_lading` field in an invoice JSON structure is a string that contains the bill of lading number or identifier. The bill of lading is a legal document issued by a carrier to a shipper, detailing the type, quantity, and destination of the goods being carried. It serves as a shipment receipt when the carrier delivers the goods at the predetermined destination. This field is important for tracking shipments and verifying that the goods have been shipped and received as specified."
  },
  "shipping_info.pro_number": {
    "type": "string",
    "description": "The `shipping_info.pro_number` field in an invoice JSON structure is a string that typically represents the \"PRO number\" associated with the shipment of goods. A PRO number, short for \"Progressive number,\" is a unique identifier used in the transportation and logistics industry to track freight shipments. This number is often assigned by the carrier and is used to trace the movement of goods from the origin to the destination. In the context of an invoice, the `shipping_info.pro_number` field would contain this unique identifier, allowing both the shipper and the recipient to access detailed tracking information about the shipment's status and location."
  },
  "sales_agent": {
    "type": "string",
    "description": "The `sales_agent` field in an invoice JSON structure is a string that typically represents the name or identifier of the salesperson responsible for the transaction associated with the invoice. This field helps in tracking which sales agent facilitated the sale, allowing for performance analysis, commission calculations, or customer queries related to the transaction. It can contain the full name of the sales agent, an employee ID, or any other unique identifier used by the company to identify sales personnel."
  },
  "items": {
    "type": "array",
    "description": "The \"items\" field in an invoice JSON structure is an array that typically contains a list of objects. Each object within this array represents an individual item that is included in the invoice. These objects usually contain details about each item, such as:\n\n- **description**: A string providing a brief description of the item.\n- **quantity**: A number indicating how many units of the item are being invoiced.\n- **unit_price**: A number specifying the price per single unit of the item.\n- **total_price**: A number representing the total price for the item, often calculated as `quantity` multiplied by `unit_price`.\n- **item_code**: A string or number that serves as a unique identifier for the item, often used for inventory or catalog purposes.\n\nThe \"items\" array allows for the invoice to include multiple products or services, each with its own set of details, thereby providing a comprehensive breakdown of what the invoice covers."
  },
  "items[].description": {
    "type": "string",
    "description": "The `items[].description` field in an invoice JSON structure is a string that provides a detailed textual description of an individual item listed on the invoice. This field is part of an array called `items`, where each element represents a separate item included in the invoice. The `description` field is used to convey specific information about the item, such as its name, features, specifications, or any other relevant details that help identify or describe the item clearly to the recipient of the invoice. This can be particularly useful for distinguishing between similar items or for providing additional context about the item being billed."
  },
  "items[].item_code": {
    "type": "string",
    "description": "The `items[].item_code` field in an invoice JSON structure is a string that represents a unique identifier or code for each item listed in the invoice. This field is part of an array of items, where each item is an object within the `items` array. The `item_code` is used to uniquely distinguish one item from another, typically corresponding to a product SKU (Stock Keeping Unit), part number, or any other unique identifier assigned to the product by the seller. This code helps in tracking, managing, and referencing the specific item in inventory systems or catalogs."
  },
  "items[].units_ordered": {
    "type": "number",
    "description": "The `items[].units_ordered` field in an invoice JSON structure is a numeric field that represents the quantity of a specific item that has been ordered. This field is part of an array called `items`, where each element in the array corresponds to a different item included in the invoice. The `units_ordered` field indicates how many units of that particular item have been requested by the customer. This information is crucial for calculating the total cost of the order, managing inventory, and fulfilling the order accurately."
  },
  "items[].units_shipped": {
    "type": "number",
    "description": "The `items[].units_shipped` field in an invoice JSON structure represents the number of units of a particular item that have been shipped. This field is a numerical value and is typically used to indicate the quantity of the specific item that was actually sent to the customer. The `items[]` part suggests that this field is part of an array of items, meaning that the invoice can contain multiple items, each with its own `units_shipped` value. This field is important for tracking the fulfillment of orders and ensuring that the correct number of units has been delivered to the customer."
  },
  "items[].unit_price": {
    "type": "number",
    "description": "The `items[].unit_price` field in an invoice JSON structure represents the price of a single unit of an item listed in the invoice. This field is of the type `number`, indicating that it should contain a numeric value. The `unit_price` is typically used to calculate the total cost of an item by multiplying it with the quantity of the item purchased. It is an important field for determining the cost breakdown of each individual item within the invoice. The `items[]` prefix suggests that this field is part of an array of items, where each item object may have its own `unit_price`."
  },
  "items[].amount": {
    "type": "number",
    "description": "The `items[].amount` field in an invoice JSON structure represents the monetary value associated with a specific item listed on the invoice. This field is of the type `number`, indicating that it holds a numeric value. The `items[]` part suggests that this field is part of an array of items, meaning the invoice can contain multiple items, each with its own `amount`. This field typically reflects the price or cost of a single item or the total cost for the quantity of that item specified on the invoice. The value should be a non-negative number, often representing currency, though it might not explicitly include currency symbols or formatting."
  },
  "totals": {
    "type": "object",
    "description": "The \"totals\" field in an invoice JSON structure is an object that typically encapsulates the overall financial summary of the invoice. This object generally includes key monetary values related to the invoice, which are crucial for both the issuer and the recipient to understand the financial obligations involved. Common properties within the \"totals\" object might include:\n\n1. **subtotal**: The total amount for all items or services before any discounts, taxes, or additional charges are applied.\n\n2. **tax**: The total amount of tax applied to the subtotal. This could be broken down further into different types of taxes if applicable (e.g., sales tax, VAT).\n\n3. **discount**: The total amount of any discounts applied to the subtotal. This could be a fixed amount or a percentage.\n\n4. **shipping**: The total cost of shipping, if applicable.\n\n5. **total**: The final total amount due, which is calculated by adding the subtotal and any applicable taxes and shipping costs, and then subtracting any discounts.\n\n6. **currency**: The currency in which the totals are denominated, often represented by a standard currency code (e.g., USD, EUR).\n\nThese fields provide a comprehensive overview of the financial details of the invoice, ensuring transparency and clarity for all parties involved. The exact structure and contents of the \"totals\" object can vary depending on the specific requirements and context of the invoicing system being used."
  },
  "totals.merchandise_total": {
    "type": "number",
    "description": "The `totals.merchandise_total` field in an invoice JSON structure represents the total monetary amount for all merchandise items before any taxes, discounts, or additional fees are applied. This field is of type `number`, indicating that it should contain a numerical value, which can be a whole number or a decimal, depending on the currency precision required. This value reflects the sum of the prices of all individual merchandise items listed in the invoice, providing a clear view of the cost of goods sold."
  },
  "totals.taxable_sales": {
    "type": "number",
    "description": "The `totals.taxable_sales` field in an invoice JSON structure is a numeric value representing the total amount of sales that are subject to tax. This field is used to capture the sum of all sales transactions within the invoice that are eligible for taxation according to applicable tax regulations. The value is typically expressed in the currency of the transaction, and it helps in calculating the total tax due by applying the relevant tax rate to this amount. This field is crucial for both accounting and compliance purposes, ensuring that the correct amount of tax is collected and reported."
  },
  "totals.sales_tax": {
    "type": "number",
    "description": "The `totals.sales_tax` field in an invoice JSON structure represents the total amount of sales tax applied to the invoice. This field is of type `number`, indicating that it holds a numerical value. The value of `totals.sales_tax` is typically calculated based on the applicable sales tax rate and the taxable portion of the total invoice amount. This field is important for accurately reflecting the additional cost incurred due to sales tax on the goods or services listed in the invoice. The number should be formatted as a decimal to accommodate precise tax calculations, especially when dealing with fractional amounts."
  },
  "totals.total_due": {
    "type": "number",
    "description": "The `totals.total_due` field in an invoice JSON structure represents the total amount of money that is owed and needs to be paid for the invoice. This field is of type `number`, indicating that it holds a numerical value. The `total_due` typically includes the sum of all items or services listed in the invoice, along with any applicable taxes, fees, or additional charges. It reflects the final amount that the recipient of the invoice is required to pay to settle the invoice in full."
  },
  "customer_service_email": {
    "type": "string",
    "description": "The `customer_service_email` field in an invoice JSON structure is a string that represents the email address designated for customer service inquiries. This field is used to provide customers with a direct contact email where they can reach out for assistance, support, or to address any questions or concerns related to the invoice or the products/services purchased. It is important that this email address is accurate and actively monitored to ensure timely and effective communication with customers."
  },
  "website": {
    "type": "string",
    "description": "The \"website\" field in an invoice JSON structure is a string that typically contains the URL of the vendor or service provider's website. This field can be used by the recipient of the invoice to access more information about the company, explore their products or services, or find contact details. It is important for the URL to be formatted correctly, usually starting with \"http://\" or \"https://\", to ensure that it can be accessed directly from web browsers or other applications that parse the JSON data."
  },
  "terms": {
    "type": "string",
    "description": "The \"terms\" field in an invoice JSON structure is used to specify the payment terms agreed upon between the seller and the buyer. This field, being of type string, typically contains a concise description of the conditions under which payment should be made. Common examples of what might be included in this field are:\n\n- \"Net 30\": Payment is due 30 days after the invoice date.\n- \"Due on receipt\": Payment is due immediately upon receiving the invoice.\n- \"2/10 Net 30\": A 2% discount is available if payment is made within 10 days; otherwise, the full amount is due within 30 days.\n\nThe \"terms\" field helps both parties understand the timeline and conditions for payment, facilitating better financial planning and cash flow management."
  },
  "freight_terms": {
    "type": "string",
    "description": "The `freight_terms` field in an invoice JSON structure is a string that specifies the conditions under which the shipment of goods is to be handled between the buyer and the seller. This field typically outlines who is responsible for the shipping costs, risks, and logistics once the goods leave the seller's premises. Common values for this field might include terms such as \"FOB\" (Free On Board), \"CIF\" (Cost, Insurance, and Freight), or \"EXW\" (Ex Works), among others. These terms help both parties understand their obligations and responsibilities regarding the transportation and delivery of the goods."
  },
  "shipped_via": {
    "type": "string",
    "description": "The `shipped_via` field in an invoice JSON structure is a string that specifies the shipping method or carrier used to deliver the goods or services listed in the invoice. This field typically contains the name of the shipping company or service, such as \"FedEx,\" \"UPS,\" \"DHL,\" or \"USPS,\" but it could also include other shipping methods like \"Courier\" or \"Freight.\" This information helps both the seller and buyer track the shipment and manage logistics related to the delivery of the invoiced items."
  },
  "pro_number": {
    "type": "string",
    "description": "The `pro_number` field in an invoice JSON structure is a string that typically represents the \"Progressive Number\" or \"Pro Number,\" which is a unique identifier used in the shipping and logistics industry. It is often associated with tracking shipments and is used by carriers to identify and trace the movement of freight. This number helps in ensuring that the shipment is correctly tracked from the point of origin to the destination. In the context of an invoice, the `pro_number` can be used to link the billing document to the specific shipment it pertains to, providing a reference for both the vendor and the customer to verify and track the delivery status of the goods being invoiced."
  },
  "items[].total_quantity": {
    "type": "number",
    "description": "The `items[].total_quantity` field in an invoice JSON structure is a numerical field that represents the total quantity of a specific item included in the invoice. It is part of an array of items, where each item is an object containing various details about the product or service being billed. The `total_quantity` field specifically indicates how many units of that item are being invoiced. This field is useful for understanding the quantity of each product or service that the invoice covers, which can be important for both inventory management and financial accounting."
  },
  "contact": {
    "type": "object",
    "description": "The \"contact\" field in an invoice JSON structure is an object that typically contains information about the individual or organization that is either issuing or receiving the invoice. This object can include various subfields to provide detailed contact information. Common subfields within the \"contact\" object might include:\n\n1. **name**: A string representing the full name of the contact person or the name of the organization.\n2. **email**: A string containing the email address of the contact, used for electronic communication.\n3. **phone**: A string with the contact's phone number, which may include country and area codes.\n4. **address**: An object that provides detailed address information, which may include:\n   - **street**: A string for the street address.\n   - **city**: A string for the city name.\n   - **state**: A string for the state or province.\n   - **postalCode**: A string for the postal or ZIP code.\n   - **country**: A string for the country name.\n5. **fax**: A string with the fax number, if applicable.\n6. **website**: A string containing the URL of the contact's website, if available.\n7. **position**: A string indicating the job title or position of the contact person within the organization, if relevant.\n\nThese subfields allow for comprehensive identification and communication with the contact associated with the invoice. The exact structure and content of the \"contact\" object may vary depending on the specific requirements of the invoicing system being used."
  },
  "contact.email": {
    "type": "string",
    "description": "The `contact.email` field in an invoice JSON structure is a string that represents the email address of the contact associated with the invoice. This field is typically used to store the email address of the person or entity to whom the invoice is being sent or who is responsible for handling the invoice. It allows for electronic communication regarding billing, payment reminders, or any inquiries related to the invoice. The value of this field should be a valid email address format, such as \"example@example.com\"."
  },
  "additional_notes": {
    "type": "string",
    "description": "The `additional_notes` field in an invoice JSON structure is a string type field intended to hold any extra information or comments that are relevant to the invoice but do not fit into the standard fields. This could include special instructions, disclaimers, or any other pertinent details that the issuer of the invoice wants to communicate to the recipient. Since it is a string, the content can be a simple sentence, a few bullet points, or a paragraph, depending on the needs of the issuer. This field is typically optional and used at the discretion of the invoice creator to provide clarity or additional context."
  },
  "company": {
    "type": "object",
    "description": "The \"company\" field in an invoice JSON structure is an object that typically contains detailed information about the company that is issuing the invoice. This object can include several sub-fields that provide specific details about the company. Common sub-fields within the \"company\" object may include:\n\n1. **name** (string): The name of the company issuing the invoice.\n2. **address** (object): An object containing address details of the company, which may include:\n   - **street** (string): The street address.\n   - **city** (string): The city where the company is located.\n   - **state** (string): The state or region.\n   - **postalCode** (string): The postal or ZIP code.\n   - **country** (string): The country where the company is located.\n\n3. **contact** (object): An object containing contact information, which may include:\n   - **phone** (string): The company's phone number.\n   - **email** (string): The company's email address.\n   - **fax** (string): The company's fax number, if applicable.\n\n4. **taxId** (string): The company's tax identification number, which may be required for tax purposes.\n\n5. **website** (string): The URL of the company's website.\n\n6. **logoUrl** (string): A URL to the company's logo, which might be used for branding on the invoice.\n\nThese fields provide a comprehensive view of the company responsible for the invoice, ensuring that the recipient has all necessary information for identification, contact, and compliance purposes. The exact structure and naming of these sub-fields can vary based on specific implementations or requirements."
  },
  "company.name": {
    "type": "string",
    "description": "The `company.name` field in an invoice JSON structure is a string that represents the name of the company issuing or associated with the invoice. This field is typically used to identify the business entity responsible for the invoice and is essential for both legal and record-keeping purposes. It may include the full legal name of the company, which could encompass any registered business names, trade names, or other identifiers that distinguish the company in official and commercial contexts."
  },
  "company.address": {
    "type": "string",
    "description": "The `company.address` field in an invoice JSON structure is a string that represents the physical or mailing address of the company issuing the invoice. This field typically includes details such as the street address, city, state or province, postal code, and possibly the country. It provides the recipient of the invoice with the necessary information to identify the location of the company, which can be important for communication, legal, or logistical purposes. The format of the address string may vary depending on regional conventions and the specific requirements of the invoicing system."
  },
  "company.phone": {
    "type": "string",
    "description": "The `company.phone` field in an invoice JSON structure is a string that represents the phone number of the company issuing the invoice. This field is used to provide contact information, allowing the recipient of the invoice to reach out to the company if they have any questions or require further assistance. The phone number should be formatted in a way that is standard and recognizable, potentially including country and area codes if applicable."
  },
  "invoice": {
    "type": "object",
    "description": "The `invoice` field in a JSON structure is an object that typically contains key-value pairs representing various details about an invoice. As an object, it serves as a container for related data fields that describe different aspects of the invoice. Here are some common fields you might find within the `invoice` object:\n\n1. **invoiceNumber** (string): A unique identifier for the invoice. This is often a sequential number or code used to track and reference the invoice.\n\n2. **date** (string, date format): The date when the invoice was issued. This is usually formatted in a standard date format, such as \"YYYY-MM-DD\".\n\n3. **dueDate** (string, date format): The date by which payment for the invoice is due. This helps the recipient understand the payment deadline.\n\n4. **billingAddress** (object): An object containing details about the billing address. This might include fields like `street`, `city`, `state`, `postalCode`, and `country`.\n\n5. **shippingAddress** (object): An object similar to `billingAddress`, but for the shipping address where goods or services are to be delivered.\n\n6. **items** (array): An array of objects, each representing an item or service included in the invoice. Each item object typically contains fields such as `description`, `quantity`, `unitPrice`, and `totalPrice`.\n\n7. **subtotal** (number): The total cost of all items or services before taxes and additional fees.\n\n8. **tax** (number): The amount of tax applied to the subtotal.\n\n9. **total** (number): The final amount due, including the subtotal, taxes, and any additional fees or discounts.\n\n10. **currency** (string): The currency in which the invoice amounts are denominated, typically represented by a currency code like \"USD\" or \"EUR\".\n\n11. **status** (string): The current status of the invoice, such as \"paid\", \"unpaid\", \"overdue\", or \"pending\".\n\n12. **notes** (string): Any additional notes or comments related to the invoice.\n\n13. **terms** (string): The payment terms or conditions associated with the invoice, such as \"Net 30\" or \"Due upon receipt\".\n\nThe `invoice` object serves as a comprehensive structure to encapsulate all necessary information related to a financial transaction between a seller and a buyer."
  },
  "invoice.totalInvoice": {
    "type": "string",
    "description": "The `invoice.totalInvoice` field in an invoice JSON structure represents the total amount due for the invoice. This field is of type `string`, which means the total amount is stored as a text value rather than a numeric type. This could be done to accommodate various formatting requirements, such as including currency symbols, commas for thousands separators, or decimal points. The value might look something like \"1234.56\" or \"$1,234.56\", depending on the formatting conventions used. It's important for applications consuming this field to handle the string appropriately, potentially converting it to a numeric type for calculations if needed."
  },
  "invoice.invoiceNumber": {
    "type": "number",
    "description": "The `invoice.invoiceNumber` field in an invoice JSON structure is a numerical field that uniquely identifies each invoice. It serves as a unique identifier or reference number for the invoice, allowing both the issuer and the recipient to track and manage invoices efficiently. Since it is of type `number`, it is expected to contain numeric values without any alphabetical or special characters. This field is crucial for organizing invoices, facilitating communication between parties, and ensuring accurate record-keeping in financial systems."
  },
  "invoice.invoiceDate": {
    "type": "string",
    "description": "The `invoice.invoiceDate` field in an invoice JSON structure represents the date when the invoice was issued. This field is of type `string`, which suggests that the date is stored as a text value. Typically, the date is formatted in a standard format such as ISO 8601 (e.g., \"YYYY-MM-DD\") to ensure consistency and to facilitate parsing by various systems. This field is crucial for both the issuer and the recipient of the invoice to track billing cycles, payment terms, and due dates."
  },
  "invoice.salesOrderNumberType": {
    "type": "string",
    "description": "The `invoice.salesOrderNumberType` field in an invoice JSON structure is a string that specifies the type or category of the sales order number associated with the invoice. This field helps to classify or identify the nature of the sales order number, which can be useful for distinguishing between different types of sales transactions or order processes. For example, it might indicate whether the sales order number is for a standard order, a special order, a backorder, or any other predefined category relevant to the business's sales operations. This field ensures that the sales order number is interpreted correctly in the context of the invoice and any related systems or processes."
  },
  "invoice.branchPlant": {
    "type": "number",
    "description": "The `invoice.branchPlant` field in an invoice JSON structure is a numeric field that likely represents the identifier for the branch or plant associated with the invoice. This number could correspond to a specific location, division, or facility within a company responsible for processing or originating the invoice. It enables the organization to track which branch or plant the transaction is linked to, facilitating better management of logistics, accounting, and operational activities."
  },
  "invoice.shipmentNumber": {
    "type": "number",
    "description": "The `invoice.shipmentNumber` field in an invoice JSON structure is a numeric field that typically represents a unique identifier associated with the shipment of goods related to the invoice. This number is used to track and reference the specific shipment, ensuring that the items listed in the invoice correspond to the correct delivery. It helps both the seller and the buyer to verify the details of the shipment, such as its status, contents, and delivery information. The use of a numeric type suggests that the shipment number is likely a sequential or system-generated identifier."
  },
  "soldTo": {
    "type": "object",
    "description": "The `soldTo` field in an invoice JSON structure is an object that typically contains information about the customer or entity that is purchasing the goods or services listed in the invoice. As an object, it can include several key-value pairs that provide detailed information about the buyer. Common properties that might be found within the `soldTo` object include:\n\n1. **name**: A string representing the full name of the individual or the name of the company that is making the purchase.\n\n2. **address**: An object containing the street address, city, state, postal code, and possibly the country of the buyer. This can be further broken down into subfields like `street`, `city`, `state`, `zipCode`, and `country`.\n\n3. **phone**: A string representing the contact phone number for the buyer.\n\n4. **email**: A string containing the email address of the buyer for electronic communication.\n\n5. **taxId**: A string representing the tax identification number of the buyer, if applicable, which can be used for tax purposes.\n\n6. **contactPerson**: An object or string providing the name and possibly the contact details of a specific person to contact regarding the invoice.\n\nThese fields help in identifying and contacting the buyer, ensuring that the invoice is directed to the correct party and that any necessary follow-up can be conducted efficiently. The exact structure and fields within the `soldTo` object can vary depending on the specific requirements of the invoicing system or the business's needs."
  },
  "soldTo.customerNumber": {
    "type": "number",
    "description": "The `soldTo.customerNumber` field in an invoice JSON structure represents the unique numerical identifier assigned to the customer who is purchasing the goods or services. This field is of type `number`, indicating that it stores numerical data. It is used to uniquely identify the customer within the seller's system, allowing for efficient tracking and management of customer-related information, such as billing details, order history, and contact information. This identifier is crucial for ensuring that the invoice is associated with the correct customer in the seller's records."
  },
  "soldTo.name": {
    "type": "string",
    "description": "The `soldTo.name` field in an invoice JSON structure is a string type field that typically represents the name of the individual or organization to whom the goods or services have been sold. This field is used to identify the customer or client that is responsible for purchasing the items listed on the invoice. It usually contains the full legal name of the person or the registered name of the company. This information is crucial for billing and record-keeping purposes, ensuring that the invoice is correctly attributed to the appropriate party."
  },
  "soldTo.address": {
    "type": "string",
    "description": "The `soldTo.address` field in an invoice JSON structure is a string that represents the address of the entity or individual who is purchasing the goods or services. This field typically includes the full street address, which may encompass the street number, street name, apartment or suite number (if applicable), and possibly additional details such as a building name. It is part of the broader `soldTo` object, which contains information about the buyer. The address is crucial for billing purposes and may be used for shipping if the sold-to address is the same as the shipping address."
  },
  "shipTo": {
    "type": "object",
    "description": "The `shipTo` field in an invoice JSON structure is an object that contains information about the shipping destination for the goods or services listed in the invoice. This object typically includes detailed address and contact information necessary for ensuring accurate and timely delivery. Common subfields within the `shipTo` object may include:\n\n- `name`: A string representing the name of the recipient or the organization to which the shipment is addressed.\n- `addressLine1`: A string for the primary address line, usually indicating the street address or P.O. Box.\n- `addressLine2`: A string for additional address information, such as an apartment, suite, or unit number (optional).\n- `city`: A string representing the city of the shipping address.\n- `state`: A string for the state, province, or region of the shipping address.\n- `postalCode`: A string or number for the postal or ZIP code of the shipping address.\n- `country`: A string indicating the country of the shipping address.\n- `phone`: A string for a contact phone number associated with the shipping address (optional).\n- `email`: A string for a contact email address associated with the shipping destination (optional).\n\nThe `shipTo` object is crucial for logistics and ensures that the goods or services are sent to the correct location. This field is particularly important in e-commerce and supply chain management, where precise shipping details are essential for successful delivery."
  },
  "shipTo.customerNumber": {
    "type": "number",
    "description": "The `shipTo.customerNumber` field in an invoice JSON structure is a numerical field that represents the unique identifier or account number assigned to the customer to whom the goods or services are being shipped. This field is typically used to reference the specific customer in the vendor's system, ensuring that the shipment is accurately linked to the correct customer record. Being of type `number`, it implies that the value should be a numeric identifier, which allows for efficient searching, sorting, and indexing within databases or systems that manage customer information."
  },
  "shipTo.name": {
    "type": "string",
    "description": "The `shipTo.name` field in an invoice JSON structure is a string that represents the name of the individual or organization to whom the goods or services are being shipped. This field is typically used to specify the recipient's full name or the name of the company that is receiving the shipment. It is important for ensuring that the delivery is made to the correct party."
  },
  "shipTo.address": {
    "type": "string",
    "description": "The `shipTo.address` field in an invoice JSON structure is a string that represents the address to which the goods or services are to be shipped. This field typically contains the full street address, which may include details such as street name, building number, apartment or suite number, and any other relevant information needed to accurately identify the delivery location. This field is essential for ensuring that the shipment is delivered to the correct destination."
  },
  "paymentTerms": {
    "type": "object",
    "description": "The `paymentTerms` field in an invoice JSON structure is an object that typically contains details about the conditions and terms under which payment is expected. This object can include several subfields that provide specific information about the payment agreement between the buyer and the seller. Here are some common subfields that might be included within the `paymentTerms` object:\n\n1. **dueDate** (string): Specifies the date by which the payment is expected to be made. This is often formatted as a date string (e.g., \"YYYY-MM-DD\").\n\n2. **terms** (string): Describes the general payment terms, such as \"Net 30,\" \"Net 60,\" or \"Due on receipt,\" which indicate the number of days within which the payment should be completed after the invoice date.\n\n3. **discount** (object): If applicable, this sub-object can detail any discounts offered for early payment. It might include fields such as:\n   - **percentage** (number): The discount percentage offered for early payment.\n   - **discountDate** (string): The date by which the payment must be made to qualify for the discount.\n\n4. **penalty** (object): Details any penalties for late payment. It might include fields such as:\n   - **percentage** (number): The penalty percentage applied for late payment.\n   - **penaltyDate** (string): The date after which the penalty is applied.\n\n5. **description** (string): A textual description providing additional details about the payment terms, which might include specific instructions or conditions.\n\nThese subfields help both the invoicing party and the recipient understand the expectations regarding payment timing, potential discounts for early payment, and penalties for late payment. The `paymentTerms` object is crucial for ensuring clear communication and agreement on financial transactions."
  },
  "paymentTerms.netDueDate": {
    "type": "string",
    "description": "The `paymentTerms.netDueDate` field in an invoice JSON structure is a string that represents the due date by which the full invoice amount must be paid. This field typically contains a date formatted as a string, often in the ISO 8601 format (e.g., \"YYYY-MM-DD\"). It is part of the payment terms details, which outline the conditions and deadlines for payment. The `netDueDate` specifically indicates the final date by which the payment should be made to avoid penalties or late fees. This field is crucial for both the issuer and the recipient of the invoice to manage cash flow and ensure timely payments."
  },
  "paymentTerms.terms": {
    "type": "string",
    "description": "The `paymentTerms.terms` field in an invoice JSON structure is a string that specifies the conditions and requirements regarding the payment for the invoice. This field typically includes information about when the payment is due, any discounts for early payment, penalties for late payment, or other specific terms agreed upon between the buyer and the seller. For example, it might contain phrases like \"Net 30 days,\" \"2% 10, Net 30,\" or \"Due upon receipt,\" which indicate the timeframe within which payment should be made and any applicable discounts or penalties. This field helps both parties understand the expected payment schedule and any incentives or consequences associated with it."
  },
  "shipping": {
    "type": "object",
    "description": "The `shipping` field in an invoice JSON structure is an object that typically contains information related to the shipping details for the invoice. This object can include various properties that provide specifics about how the goods or services are being delivered to the recipient. Common properties within the `shipping` object might include:\n\n1. **address**: An object containing details about the shipping address. This can further include fields such as `street`, `city`, `state`, `postalCode`, and `country`.\n\n2. **method**: A string indicating the shipping method used, such as \"standard\", \"express\", \"overnight\", etc.\n\n3. **cost**: A number representing the cost of shipping, often in the same currency as the invoice total.\n\n4. **carrier**: A string specifying the name of the shipping carrier or service provider, such as \"FedEx\", \"UPS\", or \"DHL\".\n\n5. **trackingNumber**: A string that provides the tracking number for the shipment, allowing the recipient to track the delivery status.\n\n6. **estimatedDeliveryDate**: A date string indicating the estimated delivery date of the shipment.\n\nThese fields help to provide a comprehensive view of the shipping arrangements associated with the invoice, ensuring that both the sender and recipient have clear and detailed information about the delivery. The exact structure and fields of the `shipping` object can vary depending on the specific requirements and context of the invoice system."
  },
  "shipping.FOBDescription": {
    "type": "string",
    "description": "The `shipping.FOBDescription` field in an invoice JSON structure is a string that provides a description of the \"Free on Board\" (FOB) terms related to the shipment of goods. FOB terms specify the point at which the responsibility and ownership of the goods transfer from the seller to the buyer. This field typically includes information about the location or port where the goods are considered delivered and any relevant conditions or agreements associated with the FOB terms. For example, it might specify \"FOB New York Port\" or \"FOB Origin\" to indicate where the transfer of risk occurs. This field helps both parties understand the shipping terms and responsibilities clearly."
  },
  "shipping.shipVia": {
    "type": "string",
    "description": "The `shipping.shipVia` field in an invoice JSON structure is a string that specifies the method or carrier used for shipping the goods. This field typically contains information about how the items are being shipped to the customer, such as the name of the shipping service provider or the type of shipping method chosen (e.g., \"FedEx\", \"UPS Ground\", \"DHL Express\", \"USPS Priority Mail\"). This information helps both the seller and the buyer track and manage the delivery process, ensuring that the shipment is handled according to the specified method."
  },
  "shipping.customerPONumber": {
    "type": "string",
    "description": "The `shipping.customerPONumber` field in an invoice JSON structure is a string that represents the Purchase Order (PO) number provided by the customer. This field is typically used to track and reference the customer's order within the shipping process. It is an identifier assigned by the customer to their order, which can be used for matching shipments to orders, ensuring that the correct products are shipped, and facilitating communication between the seller and the customer regarding the specific order. This field is important for both logistical and accounting purposes, as it helps maintain accurate records of transactions and shipments."
  },
  "shipping.POReleaseSalesAgentNumber": {
    "type": "number",
    "description": "The `shipping.POReleaseSalesAgentNumber` field in an invoice JSON structure is a numeric field that likely represents a unique identifier associated with the sales agent responsible for the purchase order release. This number can be used to track or reference the specific sales agent involved in the transaction related to the shipping of items on the invoice. This field helps in identifying which sales agent was responsible for handling or authorizing the release of the purchase order for shipping purposes."
  },
  "items[].lineNumber": {
    "type": "number",
    "description": "The `items[].lineNumber` field in an invoice JSON structure is a numerical value that represents the position or sequence of a particular item within the list of items in the invoice. This field is typically used to uniquely identify each item line on the invoice, allowing for easy reference and organization. The `lineNumber` helps in maintaining the order of items as they appear on the invoice, which can be useful for both display and processing purposes. It is an integer value and usually starts from 1, incrementing by 1 for each subsequent item in the list."
  },
  "items[].itemNumber": {
    "type": "number",
    "description": "The `items[].itemNumber` field in an invoice JSON structure is a numerical field that represents a unique identifier for each item listed in the invoice. It is part of an array of items, denoted by `items[]`, indicating that there can be multiple entries, each corresponding to a different item on the invoice. The `itemNumber` helps in distinguishing and referencing specific items within the invoice, ensuring clarity and accuracy in item identification. As a number type, it should be a valid numerical value, and it is typically used to track inventory or reference product catalogs."
  },
  "items[].tax": {
    "type": "string",
    "description": "The `items[].tax` field in an invoice JSON structure represents the tax amount applied to each individual item listed in the invoice. The field is of type `string`, which generally indicates that the tax value is stored as a textual representation. This could be due to various reasons, such as preserving formatting (e.g., including a currency symbol), accommodating different tax formats (like percentages or fixed amounts), or ensuring consistency in data types across the JSON structure. \n\nEach entry within the `items` array corresponds to a specific product or service included in the invoice, and the `tax` field provides the applicable tax information for that particular entry. When utilizing this field, it is important to consider that numerical operations may require conversion from a string to a numeric type, depending on the context in which the tax value is used."
  },
  "items[].qtyShipped": {
    "type": "number",
    "description": "The `items[].qtyShipped` field in an invoice JSON structure is a numeric field that represents the quantity of a specific item that has been shipped. It is part of an array of objects, where each object corresponds to an item included in the invoice. The `qtyShipped` field specifically indicates how many units of that particular item have been dispatched from the seller to the buyer. This information is crucial for tracking fulfillment and ensuring that the correct number of items have been delivered as per the order. The value is typically a non-negative number and can be a whole number or a decimal, depending on whether partial quantities are applicable (e.g., in cases where items are measured by weight or volume)."
  },
  "items[].transUOM": {
    "type": "string",
    "description": "The `items[].transUOM` field in an invoice JSON structure is a string that represents the unit of measure used for the transaction of each item in the invoice. This field is part of an array of items (`items[]`), indicating that it is associated with each individual item listed in the invoice. The `transUOM` specifies how the quantity of the item is measured or transacted, such as \"pieces\", \"boxes\", \"liters\", \"kilograms\", etc. This information is crucial for understanding the scale or basis on which the item is being sold or purchased."
  },
  "items[].unitPrice": {
    "type": "string",
    "description": "The `items[].unitPrice` field in an invoice JSON structure represents the price per unit of an individual item listed in the invoice. This field is part of an array called `items`, where each element in the array corresponds to a different item included in the invoice. The `unitPrice` field is of type string, which means the price is stored as a text value. This could be useful for maintaining precision, including currency symbols, or formatting the price in a specific way (e.g., \"12.99\", \"$12.99\", \"12,99 EUR\"). When using this field, it's important to ensure that any necessary conversions to numeric types are handled appropriately in the application logic, especially if calculations are required."
  },
  "items[].priceUOM": {
    "type": "string",
    "description": "The `items[].priceUOM` field in an invoice JSON structure represents the unit of measure for the price of each item listed in the invoice. This field is of type `string`, which means it contains text data that specifies the unit in which the price is expressed. Common examples of units of measure include \"each\", \"dozen\", \"pound\", \"kilogram\", \"liter\", etc. This field helps to clarify how the price of the item is calculated and ensures that both the buyer and seller understand the basis for the pricing."
  },
  "items[].weightNetGross": {
    "type": "string",
    "description": "The `items[].weightNetGross` field in an invoice JSON structure is a string that likely represents the weight of an individual item in the invoice, combining both its net and gross weight. This field is part of an array called `items`, which suggests that the invoice can list multiple items, each with its own attributes, including this weight field.\n\nThe term \"weightNetGross\" implies that this field might contain information about both the net weight (the weight of the item itself) and the gross weight (the total weight including packaging or other additional materials). However, since the type is a string, the actual format or representation of these weights is not inherently structured and could vary. It might be formatted in a way that includes both weights, separated by a delimiter, or it might be a description or label indicating whether the weight is net or gross.\n\nFor accurate parsing and usage, it would be important to refer to accompanying documentation or schema definitions to understand the expected format or conventions used in this field."
  },
  "items[].extendedPrice": {
    "type": "string",
    "description": "The `items[].extendedPrice` field in an invoice JSON structure represents the total price for a specific item or line item on the invoice. This field is a string, which typically contains the computed total cost for that item, taking into account the quantity and unit price, and possibly any discounts or additional charges that apply specifically to that item. The use of a string type allows for the inclusion of currency symbols or formatted numbers (such as decimal points or thousands separators). However, it's important to ensure that the string is formatted consistently and correctly for any further processing or display purposes."
  },
  "items[].additionalInfo": {
    "type": "object",
    "description": "The `items[].additionalInfo` field in an invoice JSON structure is an object that provides supplementary information about each item listed in the invoice. Since it is an object, it can contain one or more key-value pairs, each representing a specific piece of additional data related to the item. This field is typically used to capture extra details that don't fit into the standard item fields like `description`, `quantity`, or `price`.\n\nHere are some possible use cases and examples of what `additionalInfo` might include:\n\n1. **Custom Attributes**: Specific attributes that are unique to the item or the business context.\n   - Example: `\"color\": \"red\", \"size\": \"M\"`\n\n2. **Promotional Information**: Details about discounts or promotions applied to the item.\n   - Example: `\"promotionCode\": \"SUMMER21\", \"discountPercentage\": 10`\n\n3. **Supplier Details**: Information about the supplier of the item, if relevant.\n   - Example: `\"supplierName\": \"ABC Corp\", \"supplierContact\": \"contact@abccorp.com\"`\n\n4. **Warranty or Guarantee**: Information about any warranty or guarantee that comes with the item.\n   - Example: `\"warrantyPeriod\": \"2 years\", \"warrantyTerms\": \"Covers manufacturing defects\"`\n\n5. **Shipping Details**: Specific shipping instructions or details related to the item.\n   - Example: `\"shippingMethod\": \"Air\", \"estimatedDelivery\": \"2023-12-15\"`\n\n6. **Regulatory Information**: Compliance or regulatory information pertinent to the item.\n   - Example: `\"complianceCode\": \"FDA1234\", \"regulatoryBody\": \"FDA\"`\n\nThe structure and content of the `additionalInfo` object can vary widely depending on the business needs and the specific context of the invoice. It provides a flexible way to include any extra data that might be necessary for processing or understanding the invoice item."
  },
  "items[].additionalInfo.capacity": {
    "type": "string",
    "description": "The `items[].additionalInfo.capacity` field in an invoice JSON structure is a string that provides additional information about the capacity of an item listed in the invoice. This field is part of an array of items, where each item can have its own set of additional information. The `capacity` field is intended to describe the size, volume, or capability of the item, depending on the context. For example, if the item is a container, the `capacity` might indicate the volume it can hold (e.g., \"500ml\" or \"2 liters\"). If the item is a piece of equipment, it might describe its operational capacity (e.g., \"2000W\" for a power tool). This field allows for a flexible description of the item's capacity in a human-readable format."
  },
  "items[].additionalInfo.DNR": {
    "type": "string",
    "description": "The `items[].additionalInfo.DNR` field in an invoice JSON structure is a string field that is used to store additional information related to an item in the invoice. The `DNR` likely stands for a specific term or notation relevant to the context of the invoice or the business process, but without more context, its exact meaning is not clear. It could be an acronym or code used internally by the company to denote a particular status, instruction, or category for the item. This field is part of the `additionalInfo` object, which is nested within each item in the `items` array, suggesting that it holds supplementary data that doesn't fit within the standard item fields."
  },
  "items[].additionalInfo.GW": {
    "type": "string",
    "description": "The field `items[].additionalInfo.GW` in an invoice JSON structure is a string field that resides within the `additionalInfo` object of each item in the `items` array. This field is likely used to store additional, specific information related to the item, which could be relevant for particular business processes or reporting. The abbreviation `GW` might stand for a specific term relevant to the context of the invoice, such as \"Gross Weight,\" \"Gateway,\" or another domain-specific term. It is essential to refer to the accompanying documentation or business context to understand the precise meaning of `GW`."
  },
  "items[].additionalInfo.LotSN": {
    "type": "string",
    "description": "The `items[].additionalInfo.LotSN` field in an invoice JSON structure is a string that likely represents the lot number or serial number associated with a specific item in the invoice. This field is nested within the `items` array, indicating that it is part of the detailed information for each individual item listed on the invoice. The `additionalInfo` object serves as a container for supplementary data about the item, and `LotSN` specifically provides a unique identifier that can be used for tracking or inventory purposes, especially useful in contexts where batch or serial tracking is important, such as pharmaceuticals, electronics, or manufacturing."
  },
  "taxInfo": {
    "type": "object",
    "description": "The `taxInfo` field in an invoice JSON structure is an object that contains detailed information about the taxes applicable to the invoice. This field is essential for understanding the tax components included in the total invoice amount. The `taxInfo` object typically includes several subfields, each representing different aspects of tax-related data. Common subfields within the `taxInfo` object might include:\n\n1. **taxRate**: A numerical value representing the percentage rate of the tax applied to the invoice.\n\n2. **taxAmount**: The total monetary amount of tax calculated based on the taxable items and the tax rate.\n\n3. **taxType**: A string indicating the type of tax applied, such as \"VAT\" (Value Added Tax), \"GST\" (Goods and Services Tax), or \"Sales Tax\".\n\n4. **taxJurisdiction**: A string specifying the geographical or governmental area where the tax is applicable, such as a country, state, or city.\n\n5. **taxExempt**: A boolean value indicating whether the invoice is exempt from taxes. This might be true for certain customers or types of transactions.\n\n6. **taxDetails**: An array of objects providing more granular details about each tax component if multiple taxes apply. Each object in the array might include fields similar to those above, such as `taxRate`, `taxAmount`, and `taxType`.\n\nThe `taxInfo` object is crucial for ensuring compliance with tax regulations and for providing transparency to the customer regarding how taxes are calculated and applied to their purchase."
  },
  "taxInfo.taxRate": {
    "type": "string",
    "description": "The `taxInfo.taxRate` field in an invoice JSON structure is a string that represents the rate of tax applied to the items or services listed in the invoice. This field typically contains a percentage value expressed as a string, such as \"5%\" or \"0.075\" (for a 7.5% tax rate). The use of a string type allows for flexibility in formatting, including the possibility of including percentage symbols or decimal points. This field is crucial for calculating the total tax amount on the invoice, which is then added to the subtotal to determine the total amount payable. It is important for this field to be accurate and clearly formatted to ensure correct tax calculations and compliance with tax regulations."
  },
  "taxInfo.salesTax": {
    "type": "string",
    "description": "The `taxInfo.salesTax` field in an invoice JSON structure is a string type field that typically represents the sales tax applied to the transaction. This field may contain a percentage value (e.g., \"7%\") or a monetary amount (e.g., \"$5.00\"), depending on how the sales tax is documented in the invoice. It provides important information about the tax component of the total invoice amount, which is crucial for both accounting and compliance purposes. The format and content should be consistent with the rest of the invoice data to ensure clarity and accuracy."
  }
}